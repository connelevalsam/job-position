package actions

import (
	"github.com/connelevalsam/BuffaloProjects/job-position/models"
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Job)
// DB Table: Plural (jobs)
// Resource: Plural (Jobs)
// Path: Plural (/jobs)
// View Template Folder: Plural (/templates/jobs/)

// JobsResource is the resource for the job model
type JobsResource struct {
	buffalo.Resource
}

// List gets all Jobs. This function is mapped to the path
// GET /jobs
func (v JobsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	jobs := &models.Jobs{}
	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())
	// You can order your list here. Just change
	err := q.All(jobs)
	// to:
	// err := q.Order("created_at desc").All(jobs)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make Jobs available inside the html template
	c.Set("jobs", jobs)
	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)
	return c.Render(200, r.HTML("jobs/index.html"))
}

// Show gets the data for one Job. This function is mapped to
// the path GET /jobs/{job_id}
func (v JobsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Job
	job := &models.Job{}
	// To find the Job the parameter job_id is used.
	err := tx.Find(job, c.Param("job_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make job available inside the html template
	c.Set("job", job)
	return c.Render(200, r.HTML("jobs/show.html"))
}

// New renders the formular for creating a new Job.
// This function is mapped to the path GET /jobs/new
func (v JobsResource) New(c buffalo.Context) error {
	// Make job available inside the html template
	c.Set("job", &models.Job{})
	return c.Render(200, r.HTML("jobs/new.html"))
}

// Create adds a Job to the DB. This function is mapped to the
// path POST /jobs
func (v JobsResource) Create(c buffalo.Context) error {
	// Allocate an empty Job
	job := &models.Job{}
	// Bind job to the html form elements
	err := c.Bind(job)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(job)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make job available inside the html template
		c.Set("job", job)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("jobs/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Job was created successfully")
	// and redirect to the jobs index page
	return c.Redirect(302, "/jobs/%s", job.ID)
}

// Edit renders a edit formular for a job. This function is
// mapped to the path GET /jobs/{job_id}/edit
func (v JobsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Job
	job := &models.Job{}
	err := tx.Find(job, c.Param("job_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make job available inside the html template
	c.Set("job", job)
	return c.Render(200, r.HTML("jobs/edit.html"))
}

// Update changes a job in the DB. This function is mapped to
// the path PUT /jobs/{job_id}
func (v JobsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Job
	job := &models.Job{}
	err := tx.Find(job, c.Param("job_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind Job to the html form elements
	err = c.Bind(job)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(job)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make job available inside the html template
		c.Set("job", job)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("jobs/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Job was updated successfully")
	// and redirect to the jobs index page
	return c.Redirect(302, "/jobs/%s", job.ID)
}

// Destroy deletes a job from the DB. This function is mapped
// to the path DELETE /jobs/{job_id}
func (v JobsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Job
	job := &models.Job{}
	// To find the Job the parameter job_id is used.
	err := tx.Find(job, c.Param("job_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(job)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Job was destroyed successfully")
	// Redirect to the jobs index page
	return c.Redirect(302, "/jobs")
}
